REQ-1: OpenAPS should be able to detect if dependencies are completely installed to match the current OpenAPS algorithm
REQ-2: Raspberry OS is up to date
REQ-3: Human should make sure that the script has been run successfully
REQ-4: Human should make sure OpenAPS installation has been successful
REQ-5: OpenAPS should have a script which can be run to detect if all dependencies are completely installed
REQ-6: OpenAPS installation script must be reviewed
REQ-7: There should be a script to test that all the required dependencies have been installed which is seperate to the installation script 
REQ-8: OpenAPS install script should have pre-install and post-install scripts, pre-install makes sure that OpenAPS has dependencies before the installation of OpenAPS, post install makes sure that everything which is required has been installed
REQ-9: OpenAPS should check whether the software update is effective and conforming to OpenAPS recommendatoins in the context of the versions of the other components in the users system
REQ-10: OpenAPS should require specific versions of dependencies which have been tested to be compatible with all of the components
REQ-11: Human should be warned in documentation not to install too many packages
REQ-12: There should be continuous testing of OpenAPS dependencies with updated OS
REQ-13: When there are software updates on the RasPi, OpenAPS should stop making recommendations
REQ-14: Human user should be warned of any possible security threats
REQ-15: OpenAPS app shall remind the user to update configs when there has been a change in devices available
REQ-16: OpenAPS app shall provide information to the user on how to update relevant configs when the devices available have changed
REQ-17: OpenAPS documentation should provide information about how to set configs based on devices available
REQ-18: OpenAPS lib setup shall be updated to be kept in sync with available devices
REQ-19: OpenAPS shall notify the user when there are additional configurations available to be set
REQ-20: OpenAPS app shall display accurate current status of connected devices to user
REQ-21: For each RasPI OS dependency, the version(s) that are compatible each supported version of OpenAPS must be documented
REQ-22: Human operator must have access to the command line so they can see whether the installation script suceeded
REQ-23: Algorithm installation script should be tested on all versions of Raspbian OS that expected to be supported and the results should be feed into the documentation supported versions
REQ-24: RasPi OS must not have broken dependencies and packages
REQ-25: OpenAPS developers shall validate that the OpenAPS API work with the version of Raspi OS and project supported hardware
REQ-26: OpenAPS should allow the user to select the keyboard that they are using
REQ-27: OpenAPS developers shall specify the versions of RaspiOS which are support on each version of OpenAPS
REQ-28: OpenAPS app shall do a compatibility check on whether it is compatible with the current RaspiOS version
REQ-29: On boot, RaspiOS shall automatically start OpenAPS
REQ-30: The OpenAPS loop shall provide an "I'm alive!" signal whenever it is running so the user knows it is active
REQ-31: OpenAPS itself shall check to see if there is a newer version of OpenAPS installed
REQ-32: OpenAPS shall check for multiple instances of it running
REQ-33: User shall have fresh install of Raspi OS on machine that meets minimum requirements with no other applications running except for OpenAPS
REQ-34: If RasPi OS forwards the data in the incorrect format, OpenAPS shall check to ensure that the data is in the correct format.
REQ-35: If RasPi OS does not forward the data, OpenAPS shall implement a timeout period to ensure it receives data in a timely manner.
REQ-36: If RasPi OS forwards the data in the incorrect format, OpenAPS shall check to ensure that the data is in the correct format.  If RasPi OS does not forward the data, OpenAPS shall implement a timeout period to ensure it receives data in a timely manner.  If either check fails, OpenAPS shall alarm the user.
REQ-37: If OpenAPS fails to pull data from the RasPi OS, the user should be notified and the system should fallback to regular operation
REQ-38: (I need help with this one!  It's not under OpenAPS's control)
REQ-39: OpenAPS shall provide an error signal to the user indicating that something has gone wrong and attention is needed
REQ-40: Device handshake from Raspi OS has to recognise insulin pump
REQ-41: (1) Automatic firmware updates of the insulin pump have to be monitored by OpenAPS developers/community to make sure incompatibilities/need for user interaction are detected and communicated asap
REQ-42: (2) OpenAPS user has to be aware of automatic device updates and the possibility of issues after an update
REQ-43: (3) Alarm is needed if a handshake is expected but missing for too long (what is too long in this context?)
REQ-44: Device must be kept from interference by many other signals and if the network connection falters the insulin pump should stop using OpenAPS and fallback to defaults
REQ-45: RasPi OS must believe that it is looping when it is looping
REQ-46: RasPi OS must be able to execute all the commands that OpenAPS app sends to RasPi OS
REQ-47: RasPi OS and OpenAPS communication must be secure
REQ-48: (1) RasPi OS must be able to clearly identify the source of a command
REQ-49: (2) Commands from OpenAPS to RasPi must be unique
REQ-50: (3) RasPi OS and OpenAPS communication must be secure
REQ-51: (1) OpenAPS commands must be compatible with RasPi OS
REQ-52: (2) RasPi OS and OpenAPS communciation must be secure
REQ-53: (1) OpenAPS must recongnize when its communcation with RasPi OS is flawed
REQ-54: (2) There needs to be an external entity to monitor behaviour of RasPi OS
REQ-55: Use independent or external monitoring software that can detect unexpected or unusual operation in the kernel
REQ-56: When there are scheduling issues, pump must fall back to regular operation
REQ-57: Timestamp to include error checking, redundancies, or counter to reduce the likelihood of faulty timestamp
REQ-58: RasPi OS should be able to recognise all devices that OpenAPS is expecting
REQ-59: Include version checking in the apps that will warn user to update the Raspbian OS version if this occurs
REQ-60: If a command from OpenAPS is not received by an external devices (eg for network reasons), if not safety-critical place command in queue to resend later
REQ-61: If a command from OpenAPS is not received by an external devices (eg for network reasons), if safety-critical warn the user and fallback to regular operation
REQ-62: Implement flag structure in loop that will only get set when it is looping and warn user/shut down if not looping (may need external monitoring device)
REQ-63: RasPi OS should recognise all commands that it has been issued by the OpenAPS app
REQ-64: If the algorithm determines that a command is unsafe, the system should fallback to regular insulin pump operation and the user should be notified
REQ-65: Implement external monitoring device that can detect crash and reset Raspberry Pi
REQ-66: Industry-standard security techniques should be used to prevent hacking
REQ-67: Monitoring software that can detect unexpected or dangerous commands should be implemented
REQ-68: Include unique identifiers (address, application name etc.) to more clearly indicate if a signal is from the OpenAPS app
REQ-69: Implement unique identifier or two-step verification prompt when there's a new input device that prevents accidental sending of commands from an unexpected source
REQ-70: If Raspi OS is malfunctioning and not sending the correct commands, the user should be notified to reinstall the Raspi OS and the piu
REQ-71: Include error-checking or redundancies in all commands that will reduce the likelihood of interference causing a misinterpretation of the command
REQ-72: Compatible versions of Raspbian OS with OpenAPS shold make sure all the latest openaps packages are installed
REQ-73: OpenAPS should send commands to be queued, wait for acknowledgement from NightScout; otherwise keep in queue and attempt to resend again
REQ-74: If there is a bug in Raspberry Pi OS, the user should be warned, the system should fallback to regular operation and that version of Raspberry Pi OS should be marked as incompatible in the OpenAPS documentation
REQ-75: Wait for acknowledge from NightScout; otherwise keep in queue and attempt to resend again
REQ-76: OpenAPS should be able to detect whether the other component is able to receive and action command
REQ-77: Standardize timesource or use timesource separate from the main system clocks
REQ-78: When RasPi processor is hung, insulin pump must fall back to regular operation
REQ-79: When RasPi hardware fails, insulin pump must fall back to regular operation
REQ-80: The algorithm must successfully import commands from the OpenAPS app
REQ-81: Watchdog must be in place to monitor individual functions in the algorithm 
REQ-82: Function in the algorithm must take less than X seconds to be applied to the RasPi OS
REQ-83: Any compatibility check relating to OpenAPS configurations must accurately report when the configurations are currently not accurate
REQ-84: When the user updates their version of OpenAPS, they should be prompted to set any new config settings
REQ-85: The OpenAPS documentation should list any new config settings that need to be set for each new version
REQ-86: When the user updates the version of OpenAPS, they should run the setup script again
REQ-87: If OpenAPS detects that one of the config values are not optimally set, it must indicate this on the UI
REQ-88: Algorithm installation script should be tested on all versions of OpenAPS that expected to be supported and the results should be feed into the documentation supported versions
REQ-89: If there are accessories of the hardware that intefere with OpenAPS or the drivers that OpenAPS uses, this should be documented. 
REQ-90: OpenAPS must not have broken dependencies and packages
REQ-91: OpenAPS install script must run successfully for all valid setups of OpenAPS
REQ-92: OpenAPS must differentiate between user-enacted configurations and system-enacted configurations and must prioritze the user configurations over system configurations
REQ-93: OpenAPS must confirm the entered information (as stored/used) with the user
REQ-94: OpenAPS must communicate to the user that the entered information is not valid; OpenAPS must communicate clearly what options are being used for operations.
REQ-95: OpenAPS must set up the algorithm that the human has entered in the setup script
REQ-96: OpenAPS should test and track an algorithms performance with a wide range of different config settings
REQ-97: OpenAPS must have a forum where people can inform developers of algorithm malfunctions
REQ-98: Human must make sure that algorithm has been tested properly before using it
REQ-99: OpenAPS must specify in the documentation how to make sure an algorithm is safe
REQ-100: OpenAPS should provide a service to test the safety of algorithms
REQ-101: OpenAPS should have a facility to allow the human to test an algorithm, while running a different algorithm, and compare dosing recommendations
REQ-102: When new settings have been set, OpenAPS must update based on these settings before the next loop
REQ-103: OpenAPS should have a fixed spot to check for and implement updates, either new settings or software updates, in every (~5 minute) OpenAPS loop
REQ-104: OpenAPS should have a fixed spot to check for and implement updates in every (~5 minute) OpenAPS loop
REQ-105: (1) Data formats (APIs ?) that OpenAPS works with must be specified
REQ-106: (2) If data that has an unexpected data format/data content is received, OpenAPS must be able to detect it
REQ-107: (3) There must be a defined reaction of OpenAPS to unexpected data (to alarm the user or the other device/s)
REQ-108: (4) Data faults that cannot be detected by OpenAPS must be avoided or mitigated by the other devices
REQ-109: There must be verification measures to ensure that all used interfaces are defined and implemented
REQ-110: There must be a control flow monitoring to ensure all OpenAPS routines are run as planned.
REQ-111: Details of data processing must be specified to ensure the processing algorithms are suitable for the data formats, sizes and timing
REQ-112: Correct specification and implementation of data processing must be verified
REQ-113: (1) OpenAPS must be able to detect timed-out data
REQ-114: (2) OpenAPS must have defined behaviour when timed-out data is detected
REQ-115: OpenAPS must be able to detect gaps in the detected data (for detecting that data packages sent from RaspbiOS are lost)
REQ-116: The names of OpenAPS app commands that the algorithm uses should be all present in the version of the OpenAPS app that is being used
REQ-117: When an updated version of OpenAPS app is being used, the app commands in the OpenAPS algorithm should be refactored as necessary
REQ-118: There should be a notification to the user that the OpenAPS app commands have been updated
REQ-119: The OpenAPS app commands must be imported successfully by the algorithm (this is a Controller constraint)
REQ-120: OpenAPS should feedback error information when the RasPi rig stops working in the middle of a command
REQ-121: All aliases and commands should be pulled before the algorithm begins
REQ-122: Algorithm must not interfere with OpenAPS app command names
REQ-123: OpenAPS must make version check of OpenAPS app being used against latest version available OR human user must be notified by email when there is a new OpenAPS app version
REQ-124: Components must be connected to each other
REQ-125: When communication is failing, insulin pump must fall back to regular operation
REQ-126: Algorithm must only use OpenAPS app commands to communicate with other devices
REQ-127: Function in the algorithm must not share a name with a function in the OpenAPS app
REQ-128: There must be communication about updates between developers of different but related repositories
REQ-129: OpenAPS app commands must be clearly documented
REQ-130: Developers should be informed about which commands have changed behaviours in different versions
REQ-131: OpenAPS should warn user when other components have different timestamps and also refactor the incoming timestamps of other components in this case